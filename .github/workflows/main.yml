# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the $default-branch branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-central2 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: vv-cluster-1    # TODO: update to cluster name
  GKE_ZONE: europe-central2-c   # TODO: update to cluster zone
  DEPLOYMENT_NAME: pipe-line-test # TODO: update to deployment name
  IMAGE: pipeline-test

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # Configure Workload Identity Federation and generate an access token.
      - id: auth
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Docker configuration
        run: |-
          echo ${{ steps.auth.outputs.access_token }}
      # | sudo docker login -u oauth2accesstoken --password-stdin https://${{ env.GAR_LOCATION }}-docker.pkg.dev
      # Get the GKE credentials so we can deploy to the cluster
      - name: Set up GKE credentials
        uses: google-github-actions/get-gke-credentials@v0
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}

      # Build the Docker image
      - name: Build
        shell: bash
        run: |-
          ./mvnw package -Pnative -Dquarkus.native.container-build=true -Dquarkus.container-image.build=true -DexcludedGroups="db-connected-tests"
        
          pushTag=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
  
          docker tag vsts/$IMAGE:$GITHUB_SHA $pushTag
          
          docker image list
          docker push $pushTag
          
          export image_tag=$pushTag
          export IMAGE_NAME=$IMAGE
  
          envsubst < deployment.template.yml > deployment.yaml

      - name: Deploy
        run: |-
          kubectl apply -f deployment.yaml